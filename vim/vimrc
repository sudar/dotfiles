set nocompatible               " be iMproved

" vim exists with a non-zero exit code, if filetype off is called without filetype on,
" which messes up when vim is used as the editor for git commits
" Vundle requires to turn filetype off, because of this bug https://github.com/gmarik/vundle/issues/176#issuecomment-12996848
filetype on
filetype off

" ---------------------------------------------------------------------------
" Vundle configurations.
" ---------------------------------------------------------------------------
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()

" let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'

" ---------------------------------------------------------------------------
" Source Control Management
" ---------------------------------------------------------------------------
" Git wrapper for vim. Who needs git bash any more ;)
Plugin 'tpope/vim-fugitive'

" Highlight changes.
" Jump between changes using ]c and [c
" Stage the hunk with <Leader>hs
" Revert it with <Leader>hr
if has('signs')
    Plugin 'airblade/vim-gitgutter'

    " Options for gitgutter. More available at https://github.com/airblade/vim-gitgutter
    let g:gitgutter_escape_grep = 1   " Use raw grep
    let g:gitgutter_eager = 0         " Don't run eagerly
endif

" ---------------------------------------------------------------------------
" Navigation
" ---------------------------------------------------------------------------
" Navigate the document like a pro. Who needs a mouse any more ;)
" Press <leader><Leader>j or <Leader><Leader>k
Plugin 'Lokaltog/vim-easymotion'

" Indent based navigation
Plugin 'jeetsukumaran/vim-indentwise'

" open items from quickfix window in a new tab
set switchbuf+=usetab,newtab

" Unfold the line if going to an exact line number
nnoremap <expr> G (v:count ? 'Gzv' : 'G')

" ---------------------------------------------------------------------------
" Common edit functionalities
" ---------------------------------------------------------------------------
" Smart yanking
Plugin 'YankRing.vim'
nmap <Leader>yy :YRShow<CR>
let g:yankring_history_dir = '~/.vim/yankring'

" highlight the character which can move directly to (by `f`,`F`,`t`,`T`)
Plugin 'deris/vim-shot-f'

" Add CamelCase and underscore to word motions
Plugin 'chaoren/vim-wordmotion'

" Indent objects
Plugin 'michaeljsmith/vim-indent-object'

" context aware selection
" use + and - to change selection region
Plugin 'terryma/vim-expand-region'

" Add new targets
Plugin 'wellle/targets.vim'

" Surround - Easily change, add and delete around surroundings
Plugin 'tpope/vim-surround'
" Key mappings
" Normal mode
"-----------
"ds  - delete a surrounding
"cs  - change a surrounding
"ysiw(  - add a surrounding
"ys2aw" - add a surrounding for two words
"yS  - add a surrounding and place the surrounded text on a new line + indent it
"yss - add a surrounding to the whole line
"ySs - add a surrounding to the whole line, place it on a new line + indent it
"ySS - same as ySs

"Visual mode
"-----------
"s   - in visual mode, add a surrounding
"S   - in visual mode, add a surrounding but place text on new line + indent it

"Insert mode
"-----------
"<CTRL-s> - in insert mode, add a surrounding
"<CTRL-s><CTRL-s> - in insert mode, add a new line + surrounding + indent
"<CTRL-g>s - same as <CTRL-s>
"<CTRL-g>S - same as <CTRL-s><CTRL-s>

" Repeat the last command. Press . to repeat the last command.
Plugin 'tpope/vim-repeat'

" Provides a lot of useful key mappings including XML encoding, URL encoding etc.
Plugin 'tpope/vim-unimpaired'

" ---------------------------------------------------------------------------
" Source code handling
" ---------------------------------------------------------------------------
if v:version > 702
    " Syntax Highlighter
    Plugin 'scrooloose/syntastic.git'
    let g:syntastic_check_on_open = 0   " Enable/disable syntax check when a file is opened
    let g:syntastic_check_on_wq = 0     " Enable/disable syntax check when a file is closed
    let g:syntastic_loc_list_height = 5
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_enable_balloons = 1

    nmap <F6> :SyntasticToggleMode<CR> " Toggle Syntax highlight
endif

" Highlight current word
if has("gui_running")
    Plugin 'osyo-manga/vim-brightest'
endif

" Show signs at locations which are of interest in Quickfix window
Plugin 'tomtom/quickfixsigns_vim'

" Bulk (Un)Comment line.
Plugin 'sudar/comments.vim'

"  highlights bad whitespace. use `StripWhitespace` command to erase bad whitespace
Plugin 'ntpeters/vim-better-whitespace'

" Automatically close tags, quotes etc
Plugin 'Raimondi/delimitMate'
let delimitMate_expand_cr=1

" Add additional match pairs
set matchpairs+=<:>

" Automatically match tags and braces in different files.
runtime! macros/matchit.vim
" Python match support
"Plugin 'python_match.vim'

" Load the built-in global doxygen syntax
let g:load_doxygen_syntax=1

if has("gui_running")
    " fold only 2 level max
    set foldnestmax=2
else
    set nofoldenable
endif

" Move { from separate lines into the end of the previous line
command! MoveBraces :g/^\s*{\s*$/normal kJ <CR>

" Auto format code in VIM
Plugin 'Chiel92/vim-autoformat'

"Allows to align variable declarations
Plugin 'godlygeek/tabular'
" Align PHP Doc statements. Code from http://stackoverflow.com/q/22764695/24949
command! -range TabDoc :Tabularize/@\w\+\s\+\zs\w\+\|\%(@\w\+.*\)\@<=\u.*/
" Alight only the first match. Code from http://stackoverflow.com/a/20437260/24949
command! -nargs=1 -range TabFirst exec <line1> . ',' . <line2> . 'Tabularize /^[^' . escape(<q-args>, '\^$.[?*~') . ']*\zs' . escape(<q-args>, '\^$.[?*~')

" Allows you to split and joins lines and reformat them
" use gS and gJ
Plugin 'AndrewRadev/splitjoin.vim'

" Auto increment numbers and dates in visual block
Plugin 'VisIncr'

" Display TODO from different opened files.
Plugin 'TaskList.vim'
map <Leader>to :TaskList<CR>

if has("gui_macvim")
    " Auto complete on steroids
    Plugin 'Valloric/YouCompleteMe'

    " config
    "let g:ycm_seed_identifiers_with_syntax=1 "load language keywords in identifier list
    let g:ycm_autoclose_preview_window_after_completion = 1 "auto close preview window
    let g:ycm_min_num_identifier_candidate_chars = 10
    nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

    " Disable autocomplete for markdown files
    let g:ycm_filetype_blacklist = {
      \ 'markdown' : 1,
      \ 'unite': 1
      \}

    " YouCompleteMe and UltiSnips compatibility, with the helper of supertab
    " (via http://stackoverflow.com/a/22253548/1626737)
    let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']

    Plugin 'ervandew/supertab'
    let g:SuperTabDefaultCompletionType    = '<C-n>'
    let g:SuperTabCrMapping                = 0

    " Search for the tag file in the parent directory all the way up to HOME
    set tags=./tags,tags;~
endif

" Add support for .editorconfig file
Plugin 'editorconfig/editorconfig-vim'
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" ---------------------------------------------------------------------------
" Snippets
" ---------------------------------------------------------------------------
" Snippet manager. When you get all Snippets, who needs Textmate anymore ;)
if has("gui_macvim")
    Plugin 'SirVer/ultisnips'
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

    " Snippets for different languages
    Plugin 'honza/vim-snippets'

    " Snippet global options
    let g:snips_author='Sudar'
    let g:snips_author_email='sudar@sudarmuthu.com'
    let g:snips_author_url='http://sudarmuthu.com'
    let g:UltiSnipsEditSplit="vertical"  ":UltiSnipsEdit will split the window.
endif

" Generate random text
Plugin 'loremipsum'

" ---------------------------------------------------------------------------
" Searching/Replacing
" ---------------------------------------------------------------------------
"  Show search count
Plugin 'henrik/vim-indexed-search'
let g:indexed_search_shortmess = 1

" Smart abbreviation, Coercion, find and replace
" abbreviations are stored in after/plugin/abolish.vim
" :S for smart search and replace
Plugin 'tpope/vim-abolish'
" :cr{} Following options are used for coercion
" c: camelCase
" m: MixedCase
" _: snake_case
" s: snake_case
" u: SNAKE_UPPERCASE
" U: SNAKE_UPPERCASE
" -: dash-case (not reversible)

" To use ack inside vim. You need to install ack. Either do brew install ack or use aptitude
Plugin 'mileszs/ack.vim'
"if executable("/usr/bin/ack-grep")
    "" Need this in my Ubuntu install
    "let g:ackprg="ack-grep -H --nocolor --nogroup --column"
"endif

" ---------------------------------------------------------------------------
" File and Directory handling
" ---------------------------------------------------------------------------
" Automatically cd into the directory that the file is in
Plugin 'airblade/vim-rooter'
let g:rooter_silent_chdir = 1
let g:rooter_change_directory_for_non_project_files = 'current'
let g:rooter_patterns = ['Gruntfile.js', 'Makefile', '.git', '.git/', '.svn/', '.root', 'Rakefile', 'Gemfile', 'CHANGELOG']

if has("gui_macvim")
    " Fuzzy file opener
    Plugin 'torbiak/probe'
    let g:probe_ignore_files = [ 'bower_components', 'node_modules', 'vendor', 'uploads', 'log/.*', '.*\.png', '.*\.jpg' ]
    let g:probe_max_file_cache_size = 1000
    let g:probe_mappings = { 'accept_tab': '<enter>' }
endif

" ---------------------------------------------------------------------------
" Status bar
" ---------------------------------------------------------------------------
if has("gui_running")

    " Add more features to the status bar
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'
    let g:airline_theme="solarized"
    set laststatus=2
    set fillchars+=stl:\ ,stlnc:\

    " Don't show Spell
    let g:airline_detect_spell=0

    " Don't use any separator
    let g:airline_right_sep=''
    let g:airline_left_sep=''

    " Use shorter Mode names
    let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }

    " Show expandtab setting in statusline
    let g:airline_section_y = airline#section#create(['ffenc', ' ', '%{&expandtab?"et":"noet"}'])

    " enable/disable showing only non-zero hunks
    let g:airline#extensions#hunks#non_zero_only = 1

    " Whitespace setting
    let g:airline#extensions#whitespace#mixed_indent_algo = 2 " spaces are allowed after tabs, but not in between
    let g:airline#extensions#whitespace#trailing_format = 'tr[%s]'
    let g:airline#extensions#whitespace#mixed_indent_format = 'm-i[%s]'
    let g:airline#extensions#whitespace#long_format = 'long[%s]'
    let g:airline#extensions#whitespace#mixed_indent_file_format = 'm-i-f[%s]'
    let airline#extensions#c_like_langs = ['c', 'cpp', 'cuda', 'javascript', 'ld', 'php', 'php.wordpress' ]

    " Show buffer list in status bar
    Plugin 'bling/vim-bufferline'
    let g:bufferline_echo = 0 " Don't echo in command bar

endif

" ---------------------------------------------------------------------------
" External Applications
" ---------------------------------------------------------------------------
if has("gui_macvim")
    " Make writing Blog posts easier. Run :WriterToggle
    Plugin 'honza/writer.vim'

    " Export syntax highlighted code into rtf. This only works in Mac
    if executable('pbcopy') && executable('textutil')
        Plugin 'zerowidth/vim-copy-as-rtf'
    endif
endif

if has("gui_running")
    " Open browser
    "Plugin 'tyru/open-browser.vim'

    " Publish blog posts from Vim. Who needs Windows Live editor any more ;)
    Plugin 'pentie/VimRepress'

    "Post to twitter from vim
    Plugin 'TwitVim'
endif
" ---------------------------------------------------------------------------
" Color Schemes
" ---------------------------------------------------------------------------
" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux'
  set t_Co=16
endif

" 16 color Schemes
Plugin 'noahfrederick/vim-noctu'

" Everyone is talking about this
Plugin 'altercation/vim-colors-solarized'

" Set the default color scheme
if has("gui_running")
    colorscheme solarized
    let g:solarized_visibility="low"
else
    colorscheme noctu
    set background=light
endif

" ---------------------------------------------------------------------------
" File type specific Bundles.
" ---------------------------------------------------------------------------
" They need to present before setting filetype, because of this bug https://github.com/gmarik/vundle/issues/176#issuecomment-12996848

" Collection of language packs for vim
Plugin 'sheerun/vim-polyglot'

" Don't use JavaScript syntax bundled with vim-polyglot.
" Instead use the default one that ships with vim
let g:polyglot_disabled = ['javascript']

" Zen Coding. Expands HTML abbreviations.
Plugin 'mattn/emmet-vim'
" Language specific settings
let g:user_emmet_settings = {
\  'php' : {
\    'extends' : 'html',
\    'filters' : 'c',
\  },
\  'xml' : {
\    'extends' : 'html',
\  },
\  'haml' : {
\    'extends' : 'html',
\  },
\}

" ---------------------------------------------------------------------------
"  PHP and WordPress
" ---------------------------------------------------------------------------
" PHP indent. Need this only till v1.49+ goes into vim distribution
Plugin '2072/PHP-Indenting-for-VIm'

" PHP code folding. Config are set in ftplugin/php.vim file
Plugin 'swekaj/php-foldexpr.vim'

" PHP autocomplete
let g:phpcomplete_parse_docblock_comments=1
Plugin 'shawncplus/phpcomplete.vim'

" WordPress
"let g:wordpress_vim_wordpress_path="/Users/sudar/dev/vvv/www/wordpress-default/"
"Plugin 'dsawardekar/wordpress.vim'

" WordPress snippets
Plugin 'sudar/vim-wordpress-snippets'

" Add Arduino snippets
Plugin 'sudar/vim-arduino-snippets'

" ---------------------------------------------------------------------------
" custom folder for misc stuff
" ---------------------------------------------------------------------------
set rtp+=~/.vim/custom/

" ---------------------------------------------------------------------------
"  ******** All Bundle configuration ends here ********
" ----------------------------------------------------------------------------
filetype plugin indent on " Enable filetype specific features including indent

if &t_Co > 2 || has("gui_running")
    " switch syntax highlighting on, when the terminal has colors
    syntax on
endif

" ---------------------------------------------------------------------------
" Space and Tab related settings
" ---------------------------------------------------------------------------
set noexpandtab   " Don't expand tab to spaces
set tabstop=4     " Width of a tab is 4
set shiftwidth=4  " number of spaces to use for auto indenting
set softtabstop=4 " When backspace is used to delete spaces, delete 4 at a time. This is equal to tabstop and shfitwidth
set listchars=tab:\|\ 
set list

set nowrap        " don't wrap lines
set scrolloff=5   " Show at least 5 lines around the cursor

set backspace=indent,eol,start " allow backspacing over everything in insert mode
set autoindent    " always set auto indenting on
set copyindent    " copy the previous indentation on autoindenting
set smartindent   " Set intent smartly

set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set wildmenu      " Enhance auto completion

set number        " always show line numbers
set ruler         " Show the current line number in the status bar

" ---------------------------------------------------------------------------
" Common settings
" ----------------------------------------------------------------------------
" Set to auto read when a file is changed from the outside
set autoread

" History related settings
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo

" Visual settings
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

" ---------------------------------------------------------------------------
" Search settings
" ----------------------------------------------------------------------------
set ignorecase    " ignore case when searching. use \C to force case sensitiveness
set smartcase     " ignore case if search pattern is all lowercase,case-sensitive otherwise
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type

" Clear highlighted searches
nmap <silent> ,/ :nohlsearch<CR>

" ---------------------------------------------------------------------------
" GUI options
" ---------------------------------------------------------------------------
if has('gui_running')
    set guioptions=egmrLt "Disable Toolbar"
    set cursorline " Highlight current line
    set mouse=a " Enable Mouse
endif

if has("gui_macvim")
    set guifont=Monaco:h14
endif

" ---------------------------------------------------------------------------
" Filesystem handling settings
" ---------------------------------------------------------------------------
set nobackup
set noswapfile
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o,*.hex,*.elf "Ignore these files while doing file completion
set wildmode=longest,list " Start file completion with the longest match

" ----------------------------------------------------------------------------
" Spelling
" ----------------------------------------------------------------------------
set spell
set spellfile=~/.vim/spell/en.utf-8.add " custom spell check file
set spelllang=en_us
set spellsuggest=best

" ----------------------------------------------------------------------------
" Key mappings
" ----------------------------------------------------------------------------
" change the mapleader from \ to ,
let mapleader=","

" Paste without messing up formatting.
set pastetoggle=<F2>

" forgot sudo while opening the file
cmap w!! w !sudo tee % >/dev/null

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" ----------------------------------------------------------------------------
" Command Mode settings
" ----------------------------------------------------------------------------
" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" This shows what you are typing as a command.  I love this!
set showcmd

" ----------------------------------------------------------------------------
" Visual Mode settings
" ----------------------------------------------------------------------------
"Select previously pasted text for quick formatting.
nnoremap <leader>v V`]

" ----------------------------------------------------------------------------
" Normal Mode settings
" ----------------------------------------------------------------------------
" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Escape insert mode without pressing esc
:imap jj <Esc>

" When pushing j/k on a line that is wrapped, it navigates to the same line,
" just to the expected location rather than to the next line
nnoremap j gj
nnoremap k gk

" Map F1 key to Esc. Would be interested in those situations where you hit f1 by default
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Copy previous line word by word
imap <C-L> @@@<ESC>hhkywjl?@@@<CR>P/@@@<CR>3s

" ----------------------------------------------------------------------------
" Window/tab settings
" ----------------------------------------------------------------------------
" Mapping for tabs
nmap <silent> <Leader>h :tabp<CR>
nmap <silent> <Leader>l :tabn<CR>
nmap <leader>1 1gt
nmap <leader>2 2gt
nmap <leader>3 3gt
nmap <leader>4 4gt
nmap <leader>5 5gt
nmap <leader>6 6gt
nmap <leader>7 7gt
nmap <leader>8 8gt
nmap <leader>9 9gt
nmap <leader>0 10gt

" Easy window navigation. Prevents another keypress.
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" ----------------------------------------------------------------------------
" Buffer open/close
" ----------------------------------------------------------------------------
if has("gui_running")
    " Move cursor to last position
    augroup movecursor
        autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
    augroup END

    " Save all buffers when focus lost, ignoring warnings,
    " and return to normal mode.
    " https://github.com/airblade/dotvim/blob/b97494da7b42234a7f2c16063a3afbb566967ccb/vimrc#L242-L254
    autocmd FocusLost * nested silent! wa
    autocmd FocusLost * if mode()[0] =~ 'i\|R' | call feedkeys("\<Esc>") | endif

    " Pulse the current line
    " https://github.com/airblade/dotvim/blob/dd5d7737e39aad5e24c1a4a8c0d115ff2ae7b488/vimrc#L294-L310
    function! s:Pulse()
        setlocal nocursorline
        redraw
        sleep 100m

        setlocal cursorline
        redraw
    endfunction
    autocmd FocusGained * call s:Pulse()
endif

" Close empty buffers. Copied from http://stackoverflow.com/a/6561076/24949
function! DeleteEmptyBuffers()
    let [i, n; empty] = [1, bufnr('$')]
    while i <= n
        if bufexists(i) && bufname(i) == ''
            call add(empty, i)
        endif
        let i += 1
    endwhile
    if len(empty) > 0
        exe 'bdelete' join(empty)
    endif
endfunction

" ----------------------------------------------------------------------------
" File type specific settings. These should ideally go to /ftplugin/*
" ----------------------------------------------------------------------------
" -------- Text/Markdown -----------------------
" Plain text files are Markdown
augroup markdown
    autocmd BufNewFile,BufReadPost *.txt,*.text,*.md setlocal ft=markdown
augroup END
autocmd BufNew,BufNewFile,BufRead requirements.txt setlocal ft=

" highlight code inside markdown
let g:markdown_fenced_languages = ['php', 'sass', 'xml', 'html', 'css', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'erb=eruby', 'sh', 'shell=sh', 'bash=sh', 'make']

autocmd FileType markdown setlocal wrap linebreak scrolloff=999

" Allow these file extensions to be accessed via 'gf' of only the name, for
" e.g. gf on [[AnotherPage]] should go to AnotherPage.md
set suffixesadd=.md,.txt

" -------- C -----------------------
autocmd FileType c set omnifunc=ccomplete#Complete

" -------- C++ -----------------------
" switch between header/source with F4
map <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>

" -------- Perl -----------------------
let perl_fold=1               " Perl

" -------- R -----------------------
let r_syntax_folding=1        " R

" -------- Ruby -----------------------
let ruby_fold=1               " Ruby

" -------- Shell Scripts -----------------------
let sh_fold_enabled=1         " sh

" -------- Vim Scripts -----------------------
let vimsyn_folding='af'       " Vim script

" -------- XML Files -----------------------
let xml_syntax_folding=1      " XML
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags

" ---------------------------------------------------------------------------
" Abbreviations
" ---------------------------------------------------------------------------
" Common Typos
abbr teh the
abbr adn and

" Lines
abbr ---- ------------
abbr ==== ===============
abbr #### ###############

" Insert current date in insert mode
iab <expr> dts strftime("%b %d, %Y")
